# -*- coding: utf-8 -*-
"""Primer pre-entrega LAGLERE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FTfwNj9q8K0xxuAMjdSH7bwYdhJG52AC
"""

# Instalar bcrypt y tabulate
!pip install bcrypt
!pip install tabulate

import bcrypt
from tabulate import tabulate
import getpass

# Diccionario para almacenar usuarios
user_db = {}

# Función para hashear una contraseña
# Parámetros: password (str) - La contraseña en texto plano que se va a hashear
# Retorna: (str) - La contraseña hasheada
def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

# Función para verificar una contraseña hasheada
# Parámetros:
#   hashed_password (str) - La contraseña hasheada almacenada en la base de datos
#   password (str) - La contraseña en texto plano ingresada por el usuario
# Retorna: (bool) - True si la contraseña es correcta, False en caso contrario
def check_password(hashed_password, password):
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))

# Función para registrar un nuevo usuario
def register_user():
    # Obtiene el nombre de usuario y la contraseña
    username, password = get_user_credentials()
    # Verifica si el usuario ya existe
    if username in user_db:
        print("El nombre de usuario ya existe.")
    else:
        # Hashea la contraseña y la almacena en la base de datos
        hashed_password = hash_password(password)
        user_db[username] = hashed_password
        print("Usuario registrado con éxito.")

# Función para mostrar información de los usuarios
def display_users():
    # Verifica si hay usuarios registrados
    if not user_db:
        print("No hay usuarios registrados.")
    else:
        # Muestra la cantidad de usuarios y una tabla con sus nombres
        print(f"Existen {len(user_db.keys())} usuarios.")
        table = [[username] for username in user_db]
        print(tabulate(table, headers=["Nombre de usuario"], tablefmt="fancy_grid"))

# Función para iniciar sesión de un usuario
def login_user():
    # Obtiene el nombre de usuario y la contraseña
    username, password = get_user_credentials()
    # Verifica si las credenciales son correctas
    if username in user_db and check_password(user_db[username], password):
        print(f"Bienvenido, {username}!")
    else:
        print("Error: Nombre de usuario o contraseña inválidos.")

# Función para mostrar el menú
def display_menu():
    # Datos del menú
    menu = [
        ["1", "Registrar usuario"],
        ["2", "Mostrar usuarios"],
        ["3", "Iniciar sesión"],
        ["0", "Salir"]
    ]
    # Mostrar el menú utilizando tabulate
    print(tabulate(menu, headers=["Opción", "Acción"], tablefmt="fancy_grid"))

# Función para obtener el nombre de usuario y la contraseña
# Retorna: 0(tuple) - Una tupla con el nombre de usuario (str) y la contraseña (str)
def get_user_credentials():
    username = input("Ingrese nombre de usuario: ")
    password = getpass.getpass("Ingrese contraseña: ")
    return username, password

# Lógica principal
def main():
    running = True

    while running:
        display_menu()
        choice = input("> Ingrese su opción: ")

        if choice == '1':
            register_user()
        elif choice == '2':
            display_users()
        elif choice == '3':
            login_user()
        elif choice == '0':
            print("Saliendo...")
            running = False
        else:
            print("Opción inválida. Por favor intente de nuevo.")

# Ejecutar la función principal
if __name__ == "__main__":
    main()